{"ast":null,"code":"// redux-slice에서 반복적으로 사용되는 처리로직을 재사용하기 위한 모듈\n\nconst pending = (state, _ref) => {\n  let {\n    payload\n  } = _ref;\n  return {\n    ...state,\n    loading: true\n  };\n};\nconst fulfilled = (state, _ref2) => {\n  let {\n    payload\n  } = _ref2;\n  return {\n    data: payload,\n    loading: false,\n    error: null\n  };\n};\nconst rejected = (state, _ref3) => {\n  let {\n    payload\n  } = _ref3;\n  return {\n    ...state,\n    loading: false,\n    error: {\n      code: payload !== null && payload !== void 0 && payload.status ? payload.status : 500,\n      message: payload !== null && payload !== void 0 && payload.statusText ? payload.statusText : 'ServerError'\n    }\n  };\n};","map":{"version":3,"names":["pending","state","payload","loading","fulfilled","data","error","rejected","code","status","message","statusText"],"sources":["C:/Users/cdabo/react/14-redux-crud/src/helper/ReduxHelper.js"],"sourcesContent":["// redux-slice에서 반복적으로 사용되는 처리로직을 재사용하기 위한 모듈\r\n\r\nconst pending = (state, { payload }) => {\r\n    return { ...state, loading: true }\r\n}\r\n\r\n\r\nconst fulfilled = (state, { payload }) => {\r\n    return {\r\n        data: payload, \r\n        loading: false,\r\n        error: null\r\n    }\r\n}\r\n\r\nconst rejected = (state, { payload }) => {\r\n    return {\r\n        ...state, \r\n        loading: false,\r\n        error: {\r\n            code: (payload?.status) ? (payload.status) : 500,\r\n            message: (payload?.statusText) ? (payload.statusText) : 'ServerError'\r\n        }\r\n    }\r\n}"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAG,CAACC,KAAK,WAAkB;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EAC/B,OAAO;IAAE,GAAGD,KAAK;IAAEE,OAAO,EAAE;EAAK,CAAC;AACtC,CAAC;AAGD,MAAMC,SAAS,GAAG,CAACH,KAAK,YAAkB;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EACjC,OAAO;IACHG,IAAI,EAAEH,OAAO;IACbC,OAAO,EAAE,KAAK;IACdG,KAAK,EAAE;EACX,CAAC;AACL,CAAC;AAED,MAAMC,QAAQ,GAAG,CAACN,KAAK,YAAkB;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EAChC,OAAO;IACH,GAAGD,KAAK;IACRE,OAAO,EAAE,KAAK;IACdG,KAAK,EAAE;MACHE,IAAI,EAAGN,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEO,MAAM,GAAKP,OAAO,CAACO,MAAM,GAAI,GAAG;MAChDC,OAAO,EAAGR,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAES,UAAU,GAAKT,OAAO,CAACS,UAAU,GAAI;IAC5D;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}