{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = '/department';\n\n/** Ajax처리를 위한 미들웨어 함수 정의 */\nexport const getList = createAsyncThunk(\"DepartmentSlice/getList\", async (payload, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  let result = null;\n  try {\n    const response = await axios.get(API_URL);\n    result = response.data;\n  } catch (err) {\n    result = rejectWithValue(err.response);\n  }\n  return result;\n});\nconst DepartmentSlice = createSlice({\n  name: 'DepartmentSlice',\n  // 이 모듈이 관리하고자하는 상태값들을 명시\n  initialState: {\n    data: null,\n    loading: false,\n    error: null\n  },\n  // 상태값을 갱신하기 위한 함수들을 구현\n  // Ajax의 처리 과정에 따라 자동으로 실행된다.\n  // pending,fulfilled,rejected 한 세트!!!\n  extraReducers: {\n    // 로딩중임을 표시\n    [getList.pending]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return {\n        ...state,\n        loading: true\n      };\n    },\n    // 처리가 완료된 경우 - 미들웨어 함수가 정상적으로 리턴한 경우\n    [getList.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      return {\n        data: payload,\n        loading: false,\n        error: null\n      };\n    },\n    // 처리에 실패한 경우 - 미들웨어 함수 안에서 예외가 발생하여 catch블록이 실행된 경우\n    [getList.rejected]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      return {\n        data: payload,\n        loading: false,\n        error: {\n          code: payload !== null && payload !== void 0 && payload.status ? payload.status : 500,\n          message: payload !== null && payload !== void 0 && payload.statusText ? payload.statusText : 'ServerError'\n        }\n      };\n    }\n  }\n});\nexport default DepartmentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","getList","payload","rejectWithValue","result","response","get","data","err","DepartmentSlice","name","initialState","loading","error","extraReducers","pending","state","fulfilled","rejected","code","status","message","statusText","reducer"],"sources":["C:/Users/cdabo/react/13-redux/src/slices/DepartmentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\n\r\nconst API_URL = '/department';\r\n\r\n/** Ajax처리를 위한 미들웨어 함수 정의 */\r\nexport const getList = createAsyncThunk(\"DepartmentSlice/getList\", async (payload, {rejectWithValue }) => {\r\n    let result = null;\r\n    try {\r\n        const response = await axios.get(API_URL);\r\n        result = response.data;\r\n    } catch (err) {\r\n        result = rejectWithValue(err.response);\r\n    }\r\n return result;\r\n});\r\n\r\nconst DepartmentSlice = createSlice({\r\n    name: 'DepartmentSlice',\r\n    // 이 모듈이 관리하고자하는 상태값들을 명시\r\n    initialState: {\r\n        data: null,\r\n        loading: false,\r\n        error: null\r\n    },\r\n    // 상태값을 갱신하기 위한 함수들을 구현\r\n    // Ajax의 처리 과정에 따라 자동으로 실행된다.\r\n    // pending,fulfilled,rejected 한 세트!!!\r\n    extraReducers: {\r\n         // 로딩중임을 표시\r\n        [getList.pending]: (state, { payload }) => {\r\n            return { ...state, loading: true }\r\n        },\r\n        // 처리가 완료된 경우 - 미들웨어 함수가 정상적으로 리턴한 경우\r\n        [getList.fulfilled]: (state, { payload }) => {\r\n            return {\r\n                data: payload, \r\n                loading: false,\r\n                error: null\r\n            }\r\n        },\r\n        // 처리에 실패한 경우 - 미들웨어 함수 안에서 예외가 발생하여 catch블록이 실행된 경우\r\n        [getList.rejected]: (state, { payload }) => {\r\n            return {\r\n                data: payload, \r\n                loading: false,\r\n                error: {\r\n                code: payload?.status ? payload.status : 500,\r\n                message: payload?.statusText ? payload.statusText : 'ServerError'\r\n                }\r\n             }\r\n         }\r\n    },\r\n});\r\nexport default DepartmentSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,aAAa;;AAE7B;AACA,OAAO,MAAMC,OAAO,GAAGH,gBAAgB,CAAC,yBAAyB,EAAE,OAAOI,OAAO,WAAyB;EAAA,IAAvB;IAACC;EAAgB,CAAC;EACjG,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAACN,OAAO,CAAC;IACzCI,MAAM,GAAGC,QAAQ,CAACE,IAAI;EAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVJ,MAAM,GAAGD,eAAe,CAACK,GAAG,CAACH,QAAQ,CAAC;EAC1C;EACH,OAAOD,MAAM;AACd,CAAC,CAAC;AAEF,MAAMK,eAAe,GAAGZ,WAAW,CAAC;EAChCa,IAAI,EAAE,iBAAiB;EACvB;EACAC,YAAY,EAAE;IACVJ,IAAI,EAAE,IAAI;IACVK,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACX,CAAC;EACD;EACA;EACA;EACAC,aAAa,EAAE;IACV;IACD,CAACb,OAAO,CAACc,OAAO,GAAG,CAACC,KAAK,YAAkB;MAAA,IAAhB;QAAEd;MAAQ,CAAC;MAClC,OAAO;QAAE,GAAGc,KAAK;QAAEJ,OAAO,EAAE;MAAK,CAAC;IACtC,CAAC;IACD;IACA,CAACX,OAAO,CAACgB,SAAS,GAAG,CAACD,KAAK,YAAkB;MAAA,IAAhB;QAAEd;MAAQ,CAAC;MACpC,OAAO;QACHK,IAAI,EAAEL,OAAO;QACbU,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACX,CAAC;IACL,CAAC;IACD;IACA,CAACZ,OAAO,CAACiB,QAAQ,GAAG,CAACF,KAAK,YAAkB;MAAA,IAAhB;QAAEd;MAAQ,CAAC;MACnC,OAAO;QACHK,IAAI,EAAEL,OAAO;QACbU,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACPM,IAAI,EAAEjB,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEkB,MAAM,GAAGlB,OAAO,CAACkB,MAAM,GAAG,GAAG;UAC5CC,OAAO,EAAEnB,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEoB,UAAU,GAAGpB,OAAO,CAACoB,UAAU,GAAG;QACpD;MACH,CAAC;IACL;EACL;AACJ,CAAC,CAAC;AACF,eAAeb,eAAe,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}