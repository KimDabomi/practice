{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n/** Ajax처리를 위한 미들웨어 함수 정의 */\nexport const getKakaoSearch = createAsyncThunk('ImageSearchSlice/getKakaoSearch', async (payload, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  let result = null;\n  try {\n    const response = await axios.get(process.env.REACT_APP_KAKAO_IMAGE_SEARCH_API_URL, {\n      params: {\n        query: payload\n      },\n      headers: {\n        Authorization: `KakaoAK ${process.env.REACT_APP_KAKAO_API_KEY}`\n      }\n    });\n    result = response.data;\n  } catch (err) {\n    result = rejectWithValue(err.response);\n    console.error(err);\n  }\n  return result;\n});\nconst ImageSearchSlice = createSlice({\n  name: 'ImageSearchSlice',\n  // 이 모듈이 관리하고자하는 상태값들을 명시\n  initialState: {\n    data: null,\n    loading: false,\n    error: null\n  },\n  // 상태값을 갱신하기 위한 함수들을 구현\n  // Ajax의 처리 과정에 따라 자동으로 실행된다.\n  // pending,fulfilled,rejected 한 세트!!!\n  extraReducers: {\n    // 로딩중임을 표시\n    [getKakaoSearch.pending]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return {\n        ...state,\n        loading: true\n      };\n    },\n    // 처리가 완료된 경우 - 미들웨어 함수가 정상적으로 리턴한 경우\n    [getKakaoSearch.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      return {\n        data: payload,\n        loading: false,\n        error: null\n      };\n    },\n    // 처리에 실패한 경우 - 미들웨어 함수 안에서 예외가 발생하여 catch블록이 실행된 경우\n    [getKakaoSearch.rejected]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      return {\n        ...state,\n        loading: false,\n        error: {\n          code: payload !== null && payload !== void 0 && payload.status ? payload.status : 500,\n          message: payload !== null && payload !== void 0 && payload.statusText ? payload.statusText : 'ServerError'\n        }\n      };\n    }\n  }\n});\nexport default ImageSearchSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","getKakaoSearch","payload","rejectWithValue","result","response","get","process","env","REACT_APP_KAKAO_IMAGE_SEARCH_API_URL","params","query","headers","Authorization","REACT_APP_KAKAO_API_KEY","data","err","console","error","ImageSearchSlice","name","initialState","loading","extraReducers","pending","state","fulfilled","rejected","code","status","message","statusText","reducer"],"sources":["C:/Users/cdabo/react/13-redux/src/slices/ImageSearchSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n/** Ajax처리를 위한 미들웨어 함수 정의 */\r\nexport const getKakaoSearch = createAsyncThunk('ImageSearchSlice/getKakaoSearch', async (payload, {rejectWithValue}) => {\r\n    let result = null;\r\n    \r\n    try {\r\n        const response = await axios.get(process.env.REACT_APP_KAKAO_IMAGE_SEARCH_API_URL,{\r\n            params: {\r\n                query: payload\r\n            },\r\n            headers: {Authorization: `KakaoAK ${process.env.REACT_APP_KAKAO_API_KEY}`}\r\n        });\r\n        result = response.data;\r\n    } catch (err) {\r\n        result = rejectWithValue(err.response);\r\n        console.error(err);\r\n    }\r\n    return result;\r\n});\r\n\r\nconst ImageSearchSlice = createSlice({\r\n    name: 'ImageSearchSlice',\r\n    // 이 모듈이 관리하고자하는 상태값들을 명시\r\n    initialState: {\r\n        data: null,\r\n        loading: false,\r\n        error: null\r\n    },\r\n    // 상태값을 갱신하기 위한 함수들을 구현\r\n    // Ajax의 처리 과정에 따라 자동으로 실행된다.\r\n    // pending,fulfilled,rejected 한 세트!!!\r\n    extraReducers: {\r\n         // 로딩중임을 표시\r\n        [getKakaoSearch.pending]: (state, { payload }) => {\r\n            return { ...state, loading: true }\r\n        },\r\n        // 처리가 완료된 경우 - 미들웨어 함수가 정상적으로 리턴한 경우\r\n        [getKakaoSearch.fulfilled]: (state, { payload }) => {\r\n            return {\r\n                data: payload, \r\n                loading: false,\r\n                error: null\r\n            }\r\n        },\r\n        // 처리에 실패한 경우 - 미들웨어 함수 안에서 예외가 발생하여 catch블록이 실행된 경우\r\n        [getKakaoSearch.rejected]: (state, { payload }) => {\r\n            return {\r\n                ...state, \r\n                loading: false,\r\n                error: {\r\n                    code: (payload?.status) ? (payload.status) : 500,\r\n                    message: (payload?.statusText) ? (payload.statusText) : 'ServerError'\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\nexport default ImageSearchSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,cAAc,GAAGF,gBAAgB,CAAC,iCAAiC,EAAE,OAAOG,OAAO,WAAwB;EAAA,IAAtB;IAACC;EAAe,CAAC;EAC/G,IAAIC,MAAM,GAAG,IAAI;EAEjB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,oCAAoC,EAAC;MAC9EC,MAAM,EAAE;QACJC,KAAK,EAAET;MACX,CAAC;MACDU,OAAO,EAAE;QAACC,aAAa,EAAG,WAAUN,OAAO,CAACC,GAAG,CAACM,uBAAwB;MAAC;IAC7E,CAAC,CAAC;IACFV,MAAM,GAAGC,QAAQ,CAACU,IAAI;EAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVZ,MAAM,GAAGD,eAAe,CAACa,GAAG,CAACX,QAAQ,CAAC;IACtCY,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;EACtB;EACA,OAAOZ,MAAM;AACjB,CAAC,CAAC;AAEF,MAAMe,gBAAgB,GAAGrB,WAAW,CAAC;EACjCsB,IAAI,EAAE,kBAAkB;EACxB;EACAC,YAAY,EAAE;IACVN,IAAI,EAAE,IAAI;IACVO,OAAO,EAAE,KAAK;IACdJ,KAAK,EAAE;EACX,CAAC;EACD;EACA;EACA;EACAK,aAAa,EAAE;IACV;IACD,CAACtB,cAAc,CAACuB,OAAO,GAAG,CAACC,KAAK,YAAkB;MAAA,IAAhB;QAAEvB;MAAQ,CAAC;MACzC,OAAO;QAAE,GAAGuB,KAAK;QAAEH,OAAO,EAAE;MAAK,CAAC;IACtC,CAAC;IACD;IACA,CAACrB,cAAc,CAACyB,SAAS,GAAG,CAACD,KAAK,YAAkB;MAAA,IAAhB;QAAEvB;MAAQ,CAAC;MAC3C,OAAO;QACHa,IAAI,EAAEb,OAAO;QACboB,OAAO,EAAE,KAAK;QACdJ,KAAK,EAAE;MACX,CAAC;IACL,CAAC;IACD;IACA,CAACjB,cAAc,CAAC0B,QAAQ,GAAG,CAACF,KAAK,YAAkB;MAAA,IAAhB;QAAEvB;MAAQ,CAAC;MAC1C,OAAO;QACH,GAAGuB,KAAK;QACRH,OAAO,EAAE,KAAK;QACdJ,KAAK,EAAE;UACHU,IAAI,EAAG1B,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAE2B,MAAM,GAAK3B,OAAO,CAAC2B,MAAM,GAAI,GAAG;UAChDC,OAAO,EAAG5B,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAE6B,UAAU,GAAK7B,OAAO,CAAC6B,UAAU,GAAI;QAC5D;MACJ,CAAC;IACL;EACJ;AACJ,CAAC,CAAC;AACF,eAAeZ,gBAAgB,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}