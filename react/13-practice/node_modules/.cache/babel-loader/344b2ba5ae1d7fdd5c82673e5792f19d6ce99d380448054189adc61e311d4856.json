{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = '/department';\n\n/** Ajax처리를 위한 미들웨어 함수 정의 */\nexport const getList = createAsyncThunk(\"DepartmentSlice/getList\", async (payload, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  let result = null;\n  try {\n    result = await axios.get(API_URL);\n  } catch (err) {\n    result = rejectWithValue(err.response);\n  }\n  return result;\n});\nconst DepartmentSlice = createSlice({\n  name: 'DepartmentSlice',\n  // 이 모듈이 관리하고자하는 상태값들을 명시\n  initialState: {\n    data: null,\n    loading: false,\n    error: null\n  },\n  // 상태값을 갱신하기 위한 함수들을 구현\n  // Ajax의 처리 과정에 따라 자동으로 실행된다.\n  extraReducers: {\n    // 로딩중임을 표시\n    [함수이름.pending]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return {\n        ...state,\n        loading: true\n      };\n    },\n    // 처리가 완료된 경우 - 미들웨어 함수가 정상적으로 리턴한 경우\n    [함수이름.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      return {\n        data: payload === null || payload === void 0 ? void 0 : payload.data,\n        loading: false,\n        error: null\n      };\n    },\n    // 처리에 실패한 경우 - 미들웨어 함수 안에서 예외가 발생하여 catch블록이 실행된 경우\n    [함수이름.rejected]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      return {\n        data: payload === null || payload === void 0 ? void 0 : payload.data,\n        loading: false,\n        error: {\n          code: payload !== null && payload !== void 0 && payload.status ? payload.status : 500,\n          message: payload !== null && payload !== void 0 && payload.statusText ? payload.statusText : 'ServerError'\n        }\n      };\n    }\n  }\n});\nexport default Slice파일이름.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","getList","payload","rejectWithValue","result","get","err","response","DepartmentSlice","name","initialState","data","loading","error","extraReducers","함수이름","pending","state","fulfilled","rejected","code","status","message","statusText","Slice파일이름","reducer"],"sources":["C:/Users/cdabo/react/13-redux/src/slices/DepartmentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport axios from 'axios';\r\n\r\nconst API_URL = '/department';\r\n\r\n/** Ajax처리를 위한 미들웨어 함수 정의 */\r\nexport const getList = createAsyncThunk(\"DepartmentSlice/getList\", async (payload, {rejectWithValue }) => {\r\n    let result = null;\r\n    try {\r\n        result = await axios.get(API_URL);\r\n    } catch (err) {\r\n        result = rejectWithValue(err.response);\r\n    }\r\n return result;\r\n});\r\n\r\nconst DepartmentSlice = createSlice({\r\n    name: 'DepartmentSlice',\r\n    // 이 모듈이 관리하고자하는 상태값들을 명시\r\n    initialState: {\r\n    data: null,\r\n    loading: false,\r\n    error: null\r\n    },\r\n    // 상태값을 갱신하기 위한 함수들을 구현\r\n    // Ajax의 처리 과정에 따라 자동으로 실행된다.\r\n    extraReducers: {\r\n         // 로딩중임을 표시\r\n        [함수이름.pending]: (state, { payload }) => {\r\n            return { ...state, loading: true }\r\n        },\r\n        // 처리가 완료된 경우 - 미들웨어 함수가 정상적으로 리턴한 경우\r\n        [함수이름.fulfilled]: (state, { payload }) => {\r\n            return {\r\n                data: payload?.data, \r\n                loading: false,\r\n                error: null\r\n            }\r\n        },\r\n        // 처리에 실패한 경우 - 미들웨어 함수 안에서 예외가 발생하여 catch블록이 실행된 경우\r\n        [함수이름.rejected]: (state, { payload }) => {\r\n            return {\r\n                data: payload?.data, \r\n                loading: false,\r\n                error: {\r\n                code: payload?.status ? payload.status : 500,\r\n message: payload?.statusText ? payload.statusText : 'ServerError'\r\n }\r\n }\r\n }\r\n },\r\n});\r\nexport default Slice파일이름.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,aAAa;;AAE7B;AACA,OAAO,MAAMC,OAAO,GAAGH,gBAAgB,CAAC,yBAAyB,EAAE,OAAOI,OAAO,WAAyB;EAAA,IAAvB;IAACC;EAAgB,CAAC;EACjG,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAI;IACAA,MAAM,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,OAAO,CAAC;EACrC,CAAC,CAAC,OAAOM,GAAG,EAAE;IACVF,MAAM,GAAGD,eAAe,CAACG,GAAG,CAACC,QAAQ,CAAC;EAC1C;EACH,OAAOH,MAAM;AACd,CAAC,CAAC;AAEF,MAAMI,eAAe,GAAGX,WAAW,CAAC;EAChCY,IAAI,EAAE,iBAAiB;EACvB;EACAC,YAAY,EAAE;IACdC,IAAI,EAAE,IAAI;IACVC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACP,CAAC;EACD;EACA;EACAC,aAAa,EAAE;IACV;IACD,CAACC,IAAI,CAACC,OAAO,GAAG,CAACC,KAAK,YAAkB;MAAA,IAAhB;QAAEf;MAAQ,CAAC;MAC/B,OAAO;QAAE,GAAGe,KAAK;QAAEL,OAAO,EAAE;MAAK,CAAC;IACtC,CAAC;IACD;IACA,CAACG,IAAI,CAACG,SAAS,GAAG,CAACD,KAAK,YAAkB;MAAA,IAAhB;QAAEf;MAAQ,CAAC;MACjC,OAAO;QACHS,IAAI,EAAET,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,IAAI;QACnBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACX,CAAC;IACL,CAAC;IACD;IACA,CAACE,IAAI,CAACI,QAAQ,GAAG,CAACF,KAAK,YAAkB;MAAA,IAAhB;QAAEf;MAAQ,CAAC;MAChC,OAAO;QACHS,IAAI,EAAET,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,IAAI;QACnBC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACPO,IAAI,EAAElB,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEmB,MAAM,GAAGnB,OAAO,CAACmB,MAAM,GAAG,GAAG;UAC3DC,OAAO,EAAEpB,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEqB,UAAU,GAAGrB,OAAO,CAACqB,UAAU,GAAG;QACpD;MACA,CAAC;IACD;EACA;AACD,CAAC,CAAC;AACF,eAAeC,SAAS,CAACC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}