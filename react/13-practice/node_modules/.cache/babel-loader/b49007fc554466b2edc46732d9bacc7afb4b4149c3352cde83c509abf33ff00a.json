{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cdabo\\\\react\\\\13-redux\\\\src\\\\pages\\\\Department.js\",\n  _s = $RefreshSig$();\nimport React, { memo } from 'react';\nimport Spinner from '../components/Spinner';\nimport Table from '../components/Table';\n// 상태값을 로드하기 위한 hook과 action 함수를 dispatch할 hook 참조\nimport { useSelector, useDispatch } from 'react-redux';\n// 에러정보를 표시하기 위한 컴포넌트\nimport ErrorView from '../components/ErrorView';\nimport { getList } from '../slices/DepartmentSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Department = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(() => {\n  _s();\n  // hook을 통해 slice가 관리하는 상태값 가져오기\n  const {\n    data,\n    loading,\n    error\n  } = useSelector(state => state.DepartmentSlice);\n\n  // dispatch 함수 생성\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Department\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}, \"nKiudHvbxZk9nJwhKRyI4NSIfAc=\", false, function () {\n  return [useSelector, useDispatch];\n})), \"nKiudHvbxZk9nJwhKRyI4NSIfAc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c2 = Department;\nexport default Department;\nvar _c, _c2;\n$RefreshReg$(_c, \"Department$memo\");\n$RefreshReg$(_c2, \"Department\");","map":{"version":3,"names":["React","memo","Spinner","Table","useSelector","useDispatch","ErrorView","getList","Department","data","loading","error","state","DepartmentSlice","dispatch"],"sources":["C:/Users/cdabo/react/13-redux/src/pages/Department.js"],"sourcesContent":["import React,{memo} from 'react';\r\nimport Spinner from '../components/Spinner';\r\nimport Table from '../components/Table';\r\n// 상태값을 로드하기 위한 hook과 action 함수를 dispatch할 hook 참조\r\nimport { useSelector,useDispatch } from 'react-redux';\r\n// 에러정보를 표시하기 위한 컴포넌트\r\nimport ErrorView from '../components/ErrorView';\r\nimport {getList} from '../slices/DepartmentSlice';\r\n\r\nconst Department = memo(() => {\r\n  // hook을 통해 slice가 관리하는 상태값 가져오기\r\n  const {data,loading,error} = useSelector((state) => state.DepartmentSlice);\r\n\r\n  // dispatch 함수 생성\r\n  const dispatch = useDispatch();\r\n  \r\n  return (\r\n    <div>Department</div>\r\n  );\r\n});\r\n\r\nexport default Department;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,IAAI,QAAO,OAAO;AAChC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,KAAK,MAAM,qBAAqB;AACvC;AACA,SAASC,WAAW,EAACC,WAAW,QAAQ,aAAa;AACrD;AACA,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAAQC,OAAO,QAAO,2BAA2B;AAAC;AAElD,MAAMC,UAAU,iCAAGP,IAAI,SAAC,MAAM;EAAA;EAC5B;EACA,MAAM;IAACQ,IAAI;IAACC,OAAO;IAACC;EAAK,CAAC,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,eAAe,CAAC;;EAE1E;EACA,MAAMC,QAAQ,GAAGT,WAAW,EAAE;EAE9B,oBACE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAqB;AAEzB,CAAC;EAAA,QAR8BD,WAAW,EAGvBC,WAAW;AAAA,GAK5B;EAAA,QAR6BD,WAAW,EAGvBC,WAAW;AAAA,EAK5B;AAAC,MAVGG,UAAU;AAYhB,eAAeA,UAAU;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}