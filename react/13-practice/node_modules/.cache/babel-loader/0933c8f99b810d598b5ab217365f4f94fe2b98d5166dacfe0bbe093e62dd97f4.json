{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cdabo\\\\react\\\\13-redux\\\\src\\\\pages\\\\MovieRank.js\",\n  _s = $RefreshSig$();\nimport React, { memo, useEffect } from 'react';\nimport Spinner from '../components/Spinner';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getmovieRank } from '../slices/MovieRanksSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieRank = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(() => {\n  _s();\n  // hook을 통해 slice가 관리하는 상태값 가져오기\n  const {\n    data,\n    loading,\n    error\n  } = useSelector(state => state.MovieRankSlice);\n\n  // dispatch 함수 생성\n  const dispatch = useDispatch();\n\n  // 검색을 위해 파라미터로 전달할 날짜값을 관리하는 상태변수\n  const [targetDt, setTargetDt] = useState(dayjs().add(-1, 'd').format('YYYY-MM-DD'));\n\n  // 페이지가 열린 직후와 날짜값이 변경된 경우 리덕스 액션함수 디스패치 -> ajax호출\n  useEffect(() => {}, [dispatch, targetDt]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"MovieRank\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}, \"IW+LEY1bLYPyxXFn0At7t0XiwjY=\", false, function () {\n  return [useSelector, useDispatch];\n})), \"IW+LEY1bLYPyxXFn0At7t0XiwjY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c2 = MovieRank;\nexport default MovieRank;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieRank$memo\");\n$RefreshReg$(_c2, \"MovieRank\");","map":{"version":3,"names":["React","memo","useEffect","Spinner","useSelector","useDispatch","getmovieRank","MovieRank","data","loading","error","state","MovieRankSlice","dispatch","targetDt","setTargetDt","useState","dayjs","add","format"],"sources":["C:/Users/cdabo/react/13-redux/src/pages/MovieRank.js"],"sourcesContent":["import React,{memo,useEffect} from 'react';\r\nimport Spinner from '../components/Spinner';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport {getmovieRank} from '../slices/MovieRanksSlice';\r\n\r\nconst MovieRank = memo(() => {\r\n    // hook을 통해 slice가 관리하는 상태값 가져오기\r\n    const {data,loading,error} = useSelector((state) => state.MovieRankSlice);\r\n\r\n    // dispatch 함수 생성\r\n    const dispatch = useDispatch();\r\n\r\n    // 검색을 위해 파라미터로 전달할 날짜값을 관리하는 상태변수\r\n    const [targetDt, setTargetDt] = useState(dayjs().add(-1,'d').format('YYYY-MM-DD'));\r\n\r\n    // 페이지가 열린 직후와 날짜값이 변경된 경우 리덕스 액션함수 디스패치 -> ajax호출\r\n    useEffect(() => {},[dispatch,targetDt]);\r\n    return (\r\n        <div>MovieRank</div>\r\n    );\r\n});\r\n\r\nexport default MovieRank;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,IAAI,EAACC,SAAS,QAAO,OAAO;AAC1C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAASC,WAAW,EAACC,WAAW,QAAQ,aAAa;AACrD,SAAQC,YAAY,QAAO,2BAA2B;AAAC;AAEvD,MAAMC,SAAS,iCAAGN,IAAI,SAAC,MAAM;EAAA;EACzB;EACA,MAAM;IAACO,IAAI;IAACC,OAAO;IAACC;EAAK,CAAC,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACC,cAAc,CAAC;;EAEzE;EACA,MAAMC,QAAQ,GAAGR,WAAW,EAAE;;EAE9B;EACA,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAACC,KAAK,EAAE,CAACC,GAAG,CAAC,CAAC,CAAC,EAAC,GAAG,CAAC,CAACC,MAAM,CAAC,YAAY,CAAC,CAAC;;EAElF;EACAjB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAC,CAACW,QAAQ,EAACC,QAAQ,CAAC,CAAC;EACvC,oBACI;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAoB;AAE5B,CAAC;EAAA,QAbgCV,WAAW,EAGvBC,WAAW;AAAA,GAU9B;EAAA,QAb+BD,WAAW,EAGvBC,WAAW;AAAA,EAU9B;AAAC,MAfGE,SAAS;AAiBf,eAAeA,SAAS;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}