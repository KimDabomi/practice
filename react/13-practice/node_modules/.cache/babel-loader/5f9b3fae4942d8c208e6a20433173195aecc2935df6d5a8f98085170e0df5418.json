{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n/** Ajax처리를 위한 미들웨어 함수 정의 */\nexport const getMovieRank = createAsyncThunk(\"MovieRankSlice/getMovieRank\", async (payload, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  let result = null;\n  try {\n    const response = await axios.get(\"http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json\", {\n      params: {\n        key: process.env.REACT_APP_KOBIS_API_KEY,\n        // 컨트롤러에서 전달하는 파라미터는 payload로 전달된다 -> 단일값인 경우 payload 자체가 그 값, json인 경우 payload가 json이 된다.\n        targetDt: payload.targetDt\n      }\n    });\n    result = response.data;\n\n    // 영화진흥위원회 API는 에러가 발생하더라고 HTTP 상태코드는 200으로 응답이 오기 때문에 catch문이 동작하지 않는다. 그러므로 직접 에러를 감지해야 한다.\n    if (result.faultInfo !== undefined) {\n      const err = new Error();\n      err.response = {\n        status: 500,\n        statusText: result.faultInfo.message\n      };\n      throw err;\n    }\n  } catch (err) {\n    result = rejectWithValue(err.response);\n  }\n  return result;\n});\nconst MovieRankSlice = createSlice({\n  name: 'MovieRankSlice',\n  // 이 모듈이 관리하고자하는 상태값들을 명시\n  initialState: {\n    data: null,\n    loading: false,\n    error: null\n  },\n  // 상태값을 갱신하기 위한 함수들을 구현\n  // Ajax의 처리 과정에 따라 자동으로 실행된다.\n  // pending,fulfilled,rejected 한 세트!!!\n  extraReducers: {\n    // 로딩중임을 표시\n    [getMovieRank.pending]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      return {\n        ...state,\n        loading: true\n      };\n    },\n    // 처리가 완료된 경우 - 미들웨어 함수가 정상적으로 리턴한 경우\n    [getMovieRank.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      return {\n        data: payload,\n        loading: false,\n        error: null\n      };\n    },\n    // 처리에 실패한 경우 - 미들웨어 함수 안에서 예외가 발생하여 catch블록이 실행된 경우\n    [getMovieRank.rejected]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      return {\n        ...state,\n        loading: false,\n        error: {\n          code: payload !== null && payload !== void 0 && payload.status ? payload.status : 500,\n          message: payload !== null && payload !== void 0 && payload.statusText ? payload.statusText : 'ServerError'\n        }\n      };\n    }\n  }\n});\nexport default MovieRankSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","getMovieRank","payload","rejectWithValue","result","response","get","params","key","process","env","REACT_APP_KOBIS_API_KEY","targetDt","data","faultInfo","undefined","err","Error","status","statusText","message","MovieRankSlice","name","initialState","loading","error","extraReducers","pending","state","fulfilled","rejected","code","reducer"],"sources":["C:/Users/cdabo/react/13-redux/src/slices/MovieRankSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n/** Ajax처리를 위한 미들웨어 함수 정의 */\r\nexport const getMovieRank = createAsyncThunk(\"MovieRankSlice/getMovieRank\", async (payload, {rejectWithValue }) => {\r\n    let result = null;\r\n    try {\r\n        const response = await axios.get(\"http://kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json\",{\r\n            params: {\r\n                key: process.env.REACT_APP_KOBIS_API_KEY,\r\n                // 컨트롤러에서 전달하는 파라미터는 payload로 전달된다 -> 단일값인 경우 payload 자체가 그 값, json인 경우 payload가 json이 된다.\r\n                targetDt: payload.targetDt\r\n            }\r\n        });\r\n        result = response.data;\r\n\r\n        // 영화진흥위원회 API는 에러가 발생하더라고 HTTP 상태코드는 200으로 응답이 오기 때문에 catch문이 동작하지 않는다. 그러므로 직접 에러를 감지해야 한다.\r\n        if (result.faultInfo !== undefined) {\r\n            const err = new Error();\r\n            err.response = {status: 500, statusText: result.faultInfo.message};\r\n            throw err;\r\n        }\r\n    } catch (err) {\r\n        result = rejectWithValue(err.response);\r\n    }\r\n    return result;\r\n});\r\n\r\nconst MovieRankSlice = createSlice({\r\n    name: 'MovieRankSlice',\r\n    // 이 모듈이 관리하고자하는 상태값들을 명시\r\n    initialState: {\r\n        data: null,\r\n        loading: false,\r\n        error: null\r\n    },\r\n    // 상태값을 갱신하기 위한 함수들을 구현\r\n    // Ajax의 처리 과정에 따라 자동으로 실행된다.\r\n    // pending,fulfilled,rejected 한 세트!!!\r\n    extraReducers: {\r\n         // 로딩중임을 표시\r\n        [getMovieRank.pending]: (state, { payload }) => {\r\n            return { ...state, loading: true }\r\n        },\r\n        // 처리가 완료된 경우 - 미들웨어 함수가 정상적으로 리턴한 경우\r\n        [getMovieRank.fulfilled]: (state, { payload }) => {\r\n            return {\r\n                data: payload, \r\n                loading: false,\r\n                error: null\r\n            }\r\n        },\r\n        // 처리에 실패한 경우 - 미들웨어 함수 안에서 예외가 발생하여 catch블록이 실행된 경우\r\n        [getMovieRank.rejected]: (state, { payload }) => {\r\n            return {\r\n                ...state, \r\n                loading: false,\r\n                error: {\r\n                    code: (payload?.status) ? (payload.status) : 500,\r\n                    message: (payload?.statusText) ? (payload.statusText) : 'ServerError'\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\nexport default MovieRankSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,YAAY,GAAGF,gBAAgB,CAAC,6BAA6B,EAAE,OAAOG,OAAO,WAAyB;EAAA,IAAvB;IAACC;EAAgB,CAAC;EAC1G,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,yFAAyF,EAAC;MACvHC,MAAM,EAAE;QACJC,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,uBAAuB;QACxC;QACAC,QAAQ,EAAEV,OAAO,CAACU;MACtB;IACJ,CAAC,CAAC;IACFR,MAAM,GAAGC,QAAQ,CAACQ,IAAI;;IAEtB;IACA,IAAIT,MAAM,CAACU,SAAS,KAAKC,SAAS,EAAE;MAChC,MAAMC,GAAG,GAAG,IAAIC,KAAK,EAAE;MACvBD,GAAG,CAACX,QAAQ,GAAG;QAACa,MAAM,EAAE,GAAG;QAAEC,UAAU,EAAEf,MAAM,CAACU,SAAS,CAACM;MAAO,CAAC;MAClE,MAAMJ,GAAG;IACb;EACJ,CAAC,CAAC,OAAOA,GAAG,EAAE;IACVZ,MAAM,GAAGD,eAAe,CAACa,GAAG,CAACX,QAAQ,CAAC;EAC1C;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;AAEF,MAAMiB,cAAc,GAAGvB,WAAW,CAAC;EAC/BwB,IAAI,EAAE,gBAAgB;EACtB;EACAC,YAAY,EAAE;IACVV,IAAI,EAAE,IAAI;IACVW,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACX,CAAC;EACD;EACA;EACA;EACAC,aAAa,EAAE;IACV;IACD,CAACzB,YAAY,CAAC0B,OAAO,GAAG,CAACC,KAAK,YAAkB;MAAA,IAAhB;QAAE1B;MAAQ,CAAC;MACvC,OAAO;QAAE,GAAG0B,KAAK;QAAEJ,OAAO,EAAE;MAAK,CAAC;IACtC,CAAC;IACD;IACA,CAACvB,YAAY,CAAC4B,SAAS,GAAG,CAACD,KAAK,YAAkB;MAAA,IAAhB;QAAE1B;MAAQ,CAAC;MACzC,OAAO;QACHW,IAAI,EAAEX,OAAO;QACbsB,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACX,CAAC;IACL,CAAC;IACD;IACA,CAACxB,YAAY,CAAC6B,QAAQ,GAAG,CAACF,KAAK,YAAkB;MAAA,IAAhB;QAAE1B;MAAQ,CAAC;MACxC,OAAO;QACH,GAAG0B,KAAK;QACRJ,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;UACHM,IAAI,EAAG7B,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEgB,MAAM,GAAKhB,OAAO,CAACgB,MAAM,GAAI,GAAG;UAChDE,OAAO,EAAGlB,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEiB,UAAU,GAAKjB,OAAO,CAACiB,UAAU,GAAI;QAC5D;MACJ,CAAC;IACL;EACJ;AACJ,CAAC,CAAC;AACF,eAAeE,cAAc,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}